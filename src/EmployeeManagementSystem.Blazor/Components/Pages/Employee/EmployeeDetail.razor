@page "/Employees/{Id:guid}"

@using EmployeeManagementSystem.Blazor.Enums
@using EmployeeManagementSystem.Blazor.Extensions
@using EmployeeManagementSystem.Blazor.Models;
@using EmployeeManagementSystem.Blazor.Models.Mappings
@using EmployeeManagementSystem.Blazor.Models.Requests
@using EmployeeManagementSystem.Blazor.Services;
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]
@inject IEmployeeService EmployeeService
@inject IToastService toastService
@inject NavigationManager NavigationManager

<PageTitle>EMS - Edit Employee</PageTitle>

@if(Employee != null)
{
    <Card>
        <div class="row user-detail-row">
            <h3>Edit Employee</h3>
            <div class="form-group">

                <EditForm Model="@editEmployeeRequest" method="post" OnValidSubmit="EditEmployeeAsync" FormName="EditEmployee">
                    <DataAnnotationsValidator />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="editEmployeeRequest.Name" class="form-control" id="floatingInputName" placeholder="Name" />
                        <label for="floatingInputName">Name</label>
                        <ValidationMessage For="() => editEmployeeRequest.Name" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputNumber @bind-Value="editEmployeeRequest.Salary" class="form-control" id="floatingInputSalary" placeholder="Salary" />
                        <label for="floatingInputSalary">Salary</label>
                        <ValidationMessage For="() => editEmployeeRequest.Salary" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="editEmployeeRequest.EmployeeType" class="form-control" id="floatingInputEmployeeType" placeholder="Type">
                            @foreach (EmployeeType type in Enum.GetValues(typeof(EmployeeType)))
                            {
                                <option value="@type">@type.GetDisplayName()</option>
                            }
                        </InputSelect>
                        <label for="floatingInputEmployeeType">Type</label>
                        <ValidationMessage For="() => editEmployeeRequest.EmployeeType" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="editEmployeeRequest.JobTitle" class="form-control" id="floatingInputJobTitle" placeholder="Job Title">
                            @foreach (JobTitle jobTitle in Enum.GetValues(typeof(JobTitle)))
                            {
                                <option value="@jobTitle">@jobTitle.GetDisplayName()</option>
                            }
                        </InputSelect>
                        <label for="floatingInputJobTitle">Job Title</label>
                        <ValidationMessage For="() => editEmployeeRequest.JobTitle" class="text-danger" />
                    </div>
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="editEmployeeRequest.ImageUrl" class="form-control" id="floatingInputImageUrl" placeholder="Image URL" />
                        <label for="floatingInputImageUrl">Image URL</label>
                        <ValidationMessage For="() => editEmployeeRequest.ImageUrl" class="text-danger" />
                    </div>
                    <button class="btn btn-warning" type="submit">Update</button>
                    <button class="btn btn-danger" type="button" @onclick="ShowDeleteConfirmation">Delele</button>
                    <button class="btn btn-outline-secondary" type="button" @onclick="Cancel">Cancel</button>
                </EditForm>
            </div>
        </div>
    </Card>

    @if(ShowDeleteModal)
    {
    <ConfirmationModal OnCancelCallback="HideDeleteConfirmation" OnConfirmCallback="DeleteEmployeeAsync">
        <p>Are you sure you want to delete this employee?</p>
    </ConfirmationModal>
    }
}

@code {
    [Parameter] public Guid Id { get; set; }

    private Employee? Employee { get; set; }
    private bool ShowDeleteModal { get; set; }

    private EditEmployeeRequest editEmployeeRequest = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await EmployeeService.GetEmployeeAsync(Id);
        Employee = response.Employee;
        if (Employee != null)
        {
            editEmployeeRequest = Employee.ToRequest();
        }
    }

    private async Task EditEmployeeAsync()
    {
        if (Employee != null)
        {
            Employee.Name = editEmployeeRequest.Name;
            Employee.Salary = editEmployeeRequest.Salary;
            Employee.EmployeeType = editEmployeeRequest.EmployeeType;
            Employee.JobTitle = editEmployeeRequest.JobTitle;
            Employee.ImageUrl = editEmployeeRequest.ImageUrl;

            var response = await EmployeeService.EditEmployeeAsync(Employee);
        }

        NavigationManager.NavigateTo("/");
    }

    private async Task DeleteEmployeeAsync()
    {
        if (Employee != null)
        {
            var response = await EmployeeService.DeleteEmployeeAsync(Employee);
        }

        NavigationManager.NavigateTo("/");
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }


    private void ShowDeleteConfirmation()
    {
        ShowDeleteModal = true;
    }
    
    private void HideDeleteConfirmation()
    {
        ShowDeleteModal = false;
    }
}
